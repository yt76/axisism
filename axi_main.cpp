#include <systemc.h>

#include "axi_tb.h"
#include "obj_dir/Vaxi_dut.h"

struct AxiSignals {
  sc_signal<bool> ARVALID;
  sc_signal<bool> ARREADY;
  sc_signal<uint32_t> ARLEN;
  sc_signal<uint32_t> ARSIZE;
  sc_signal<bool> ARID;
  sc_signal<uint32_t> ARBURST;
  sc_signal<bool> ARLOCK;
  sc_signal<uint32_t> ARCACHE;
  sc_signal<uint32_t> ARPROT;
  sc_signal<uint32_t> ARQOS;
  sc_signal<bool> ARUSER;
  sc_signal<bool> RVALID;
  sc_signal<bool> RREADY;
  sc_signal<bool> RLAST;
  sc_signal<uint32_t> RRESP;
  sc_signal<bool> RUSER;
  sc_signal<bool> AWVALID;
  sc_signal<bool> AWREADY;
  sc_signal<uint32_t> AWLEN;
  sc_signal<uint32_t> AWSIZE;
  sc_signal<bool> AWID;
  sc_signal<uint32_t> AWBURST;
  sc_signal<bool> AWLOCK;
  sc_signal<uint32_t> AWCACHE;
  sc_signal<uint32_t> AWPROT;
  sc_signal<uint32_t> AWQOS;
  sc_signal<bool> AWUSER;
  sc_signal<bool> WVALID;
  sc_signal<bool> WREADY;
  sc_signal<bool> WLAST;
  sc_signal<uint32_t> WSTRB;
  sc_signal<bool> WUSER;
  sc_signal<bool> BVALID;
  sc_signal<bool> BREADY;
  sc_signal<uint32_t> BRESP;
  sc_signal<uint32_t> ARADDR;
  sc_signal<uint32_t> RDATA;
  sc_signal<uint32_t> AWADDR;
  sc_signal<uint32_t> WDATA;
};

SC_MODULE(Reset) {
 public:
  SC_CTOR(Reset) { SC_THREAD(run); };

  void run() {
    rst.write(true);
    wait(clk.negedge_event());
    wait(clk.negedge_event());
    wait(clk.negedge_event());
    rst.write(false);
  }

  sc_out<bool> rst;
  sc_in<bool> clk;
};

int sc_main(int argc, char **argv) {
  sc_clock clk("CLK", 10, SC_NS);
  sc_signal<bool> rst;

  AxiSignals sSigs;
  AxiSignals mSigs;

  Vaxi_dut dut("dut");
  dut.clk(clk);
  dut.rst(rst);

  Reset reset("reset");
  reset.clk(clk);
  reset.rst(rst);

  dut.m_ARADDR(mSigs.ARADDR);
  dut.m_ARBURST(mSigs.ARBURST);
  dut.m_ARCACHE(mSigs.ARCACHE);
  dut.m_ARID(mSigs.ARID);
  dut.m_ARLEN(mSigs.ARLEN);
  dut.m_ARLOCK(mSigs.ARLOCK);
  dut.m_ARPROT(mSigs.ARPROT);
  dut.m_ARQOS(mSigs.ARQOS);
  dut.m_ARREADY(mSigs.ARREADY);
  dut.m_ARSIZE(mSigs.ARSIZE);
  dut.m_ARUSER(mSigs.ARUSER);
  dut.m_ARVALID(mSigs.ARVALID);
  dut.m_AWADDR(mSigs.AWADDR);
  dut.m_AWBURST(mSigs.AWBURST);
  dut.m_AWCACHE(mSigs.AWCACHE);
  dut.m_AWID(mSigs.AWID);
  dut.m_AWLEN(mSigs.AWLEN);
  dut.m_AWLOCK(mSigs.AWLOCK);
  dut.m_AWPROT(mSigs.AWPROT);
  dut.m_AWQOS(mSigs.AWQOS);
  dut.m_AWREADY(mSigs.AWREADY);
  dut.m_AWSIZE(mSigs.AWSIZE);
  dut.m_AWUSER(mSigs.AWUSER);
  dut.m_AWVALID(mSigs.AWVALID);
  dut.m_BREADY(mSigs.BREADY);
  dut.m_BRESP(mSigs.BRESP);
  dut.m_BVALID(mSigs.BVALID);
  dut.m_RDATA(mSigs.RDATA);
  dut.m_RLAST(mSigs.RLAST);
  dut.m_RREADY(mSigs.RREADY);
  dut.m_RRESP(mSigs.RRESP);
  dut.m_RUSER(mSigs.RUSER);
  dut.m_RVALID(mSigs.RVALID);
  dut.m_WDATA(mSigs.WDATA);
  dut.m_WLAST(mSigs.WLAST);
  dut.m_WREADY(mSigs.WREADY);
  dut.m_WSTRB(mSigs.WSTRB);
  dut.m_WUSER(mSigs.WUSER);
  dut.m_WVALID(mSigs.WVALID);
  dut.s_ARADDR(sSigs.ARADDR);
  dut.s_ARBURST(sSigs.ARBURST);
  dut.s_ARCACHE(sSigs.ARCACHE);
  dut.s_ARID(sSigs.ARID);
  dut.s_ARLEN(sSigs.ARLEN);
  dut.s_ARLOCK(sSigs.ARLOCK);
  dut.s_ARPROT(sSigs.ARPROT);
  dut.s_ARQOS(sSigs.ARQOS);
  dut.s_ARREADY(sSigs.ARREADY);
  dut.s_ARSIZE(sSigs.ARSIZE);
  dut.s_ARUSER(sSigs.ARUSER);
  dut.s_ARVALID(sSigs.ARVALID);
  dut.s_AWADDR(sSigs.AWADDR);
  dut.s_AWBURST(sSigs.AWBURST);
  dut.s_AWCACHE(sSigs.AWCACHE);
  dut.s_AWID(sSigs.AWID);
  dut.s_AWLEN(sSigs.AWLEN);
  dut.s_AWLOCK(sSigs.AWLOCK);
  dut.s_AWPROT(sSigs.AWPROT);
  dut.s_AWQOS(sSigs.AWQOS);
  dut.s_AWREADY(sSigs.AWREADY);
  dut.s_AWSIZE(sSigs.AWSIZE);
  dut.s_AWUSER(sSigs.AWUSER);
  dut.s_AWVALID(sSigs.AWVALID);
  dut.s_BREADY(sSigs.BREADY);
  dut.s_BRESP(sSigs.BRESP);
  dut.s_BVALID(sSigs.BVALID);
  dut.s_RDATA(sSigs.RDATA);
  dut.s_RLAST(sSigs.RLAST);
  dut.s_RREADY(sSigs.RREADY);
  dut.s_RRESP(sSigs.RRESP);
  dut.s_RUSER(sSigs.RUSER);
  dut.s_RVALID(sSigs.RVALID);
  dut.s_WDATA(sSigs.WDATA);
  dut.s_WLAST(sSigs.WLAST);
  dut.s_WREADY(sSigs.WREADY);
  dut.s_WSTRB(sSigs.WSTRB);
  dut.s_WUSER(sSigs.WUSER);
  dut.s_WVALID(sSigs.WVALID);

  AxiTB tb("tb");
  tb.clk(clk);

  tb.m_ARADDR(mSigs.ARADDR);
  tb.m_ARBURST(mSigs.ARBURST);
  tb.m_ARCACHE(mSigs.ARCACHE);
  tb.m_ARID(mSigs.ARID);
  tb.m_ARLEN(mSigs.ARLEN);
  tb.m_ARLOCK(mSigs.ARLOCK);
  tb.m_ARPROT(mSigs.ARPROT);
  tb.m_ARQOS(mSigs.ARQOS);
  tb.m_ARREADY(mSigs.ARREADY);
  tb.m_ARSIZE(mSigs.ARSIZE);
  tb.m_ARUSER(mSigs.ARUSER);
  tb.m_ARVALID(mSigs.ARVALID);
  tb.m_AWADDR(mSigs.AWADDR);
  tb.m_AWBURST(mSigs.AWBURST);
  tb.m_AWCACHE(mSigs.AWCACHE);
  tb.m_AWID(mSigs.AWID);
  tb.m_AWLEN(mSigs.AWLEN);
  tb.m_AWLOCK(mSigs.AWLOCK);
  tb.m_AWPROT(mSigs.AWPROT);
  tb.m_AWQOS(mSigs.AWQOS);
  tb.m_AWREADY(mSigs.AWREADY);
  tb.m_AWSIZE(mSigs.AWSIZE);
  tb.m_AWUSER(mSigs.AWUSER);
  tb.m_AWVALID(mSigs.AWVALID);
  tb.m_BREADY(mSigs.BREADY);
  tb.m_BRESP(mSigs.BRESP);
  tb.m_BVALID(mSigs.BVALID);
  tb.m_RDATA(mSigs.RDATA);
  tb.m_RLAST(mSigs.RLAST);
  tb.m_RREADY(mSigs.RREADY);
  tb.m_RRESP(mSigs.RRESP);
  tb.m_RUSER(mSigs.RUSER);
  tb.m_RVALID(mSigs.RVALID);
  tb.m_WDATA(mSigs.WDATA);
  tb.m_WLAST(mSigs.WLAST);
  tb.m_WREADY(mSigs.WREADY);
  tb.m_WSTRB(mSigs.WSTRB);
  tb.m_WUSER(mSigs.WUSER);
  tb.m_WVALID(mSigs.WVALID);
  tb.s_ARADDR(sSigs.ARADDR);
  tb.s_ARBURST(sSigs.ARBURST);
  tb.s_ARCACHE(sSigs.ARCACHE);
  tb.s_ARID(sSigs.ARID);
  tb.s_ARLEN(sSigs.ARLEN);
  tb.s_ARLOCK(sSigs.ARLOCK);
  tb.s_ARPROT(sSigs.ARPROT);
  tb.s_ARQOS(sSigs.ARQOS);
  tb.s_ARREADY(sSigs.ARREADY);
  tb.s_ARSIZE(sSigs.ARSIZE);
  tb.s_ARUSER(sSigs.ARUSER);
  tb.s_ARVALID(sSigs.ARVALID);
  tb.s_AWADDR(sSigs.AWADDR);
  tb.s_AWBURST(sSigs.AWBURST);
  tb.s_AWCACHE(sSigs.AWCACHE);
  tb.s_AWID(sSigs.AWID);
  tb.s_AWLEN(sSigs.AWLEN);
  tb.s_AWLOCK(sSigs.AWLOCK);
  tb.s_AWPROT(sSigs.AWPROT);
  tb.s_AWQOS(sSigs.AWQOS);
  tb.s_AWREADY(sSigs.AWREADY);
  tb.s_AWSIZE(sSigs.AWSIZE);
  tb.s_AWUSER(sSigs.AWUSER);
  tb.s_AWVALID(sSigs.AWVALID);
  tb.s_BREADY(sSigs.BREADY);
  tb.s_BRESP(sSigs.BRESP);
  tb.s_BVALID(sSigs.BVALID);
  tb.s_RDATA(sSigs.RDATA);
  tb.s_RLAST(sSigs.RLAST);
  tb.s_RREADY(sSigs.RREADY);
  tb.s_RRESP(sSigs.RRESP);
  tb.s_RUSER(sSigs.RUSER);
  tb.s_RVALID(sSigs.RVALID);
  tb.s_WDATA(sSigs.WDATA);
  tb.s_WLAST(sSigs.WLAST);
  tb.s_WREADY(sSigs.WREADY);
  tb.s_WSTRB(sSigs.WSTRB);
  tb.s_WUSER(sSigs.WUSER);
  tb.s_WVALID(sSigs.WVALID);

  sc_start();
  return 0;
}

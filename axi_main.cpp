#include <systemc.h>

#include "axi_tb.h"
#include "obj_dir/Vaxi_dut.h"

SC_MODULE(Reset) {
 public:
  SC_CTOR(Reset) { SC_THREAD(run); };

  void run() {
    rst.write(true);
    wait(clk.negedge_event());
    wait(clk.negedge_event());
    wait(clk.negedge_event());
    rst.write(false);
  }

  sc_out<bool> rst;
  sc_in<bool> clk;
};

int sc_main(int argc, char **argv) {
  sc_clock clk("CLK", 10, SC_NS);
  sc_signal<bool> rst;

  // s_ is Slave side for DUT. m_ is Master.
  sc_signal<bool> s_ARVALID;
  sc_signal<bool> s_ARREADY;
  sc_signal<uint32_t> s_ARLEN;
  sc_signal<uint32_t> s_ARSIZE;
  sc_signal<bool> s_ARID;
  sc_signal<uint32_t> s_ARBURST;
  sc_signal<bool> s_ARLOCK;
  sc_signal<uint32_t> s_ARCACHE;
  sc_signal<uint32_t> s_ARPROT;
  sc_signal<uint32_t> s_ARQOS;
  sc_signal<bool> s_ARUSER;
  sc_signal<bool> s_RVALID;
  sc_signal<bool> s_RREADY;
  sc_signal<bool> s_RLAST;
  sc_signal<uint32_t> s_RRESP;
  sc_signal<bool> s_RUSER;
  sc_signal<bool> s_AWVALID;
  sc_signal<bool> s_AWREADY;
  sc_signal<uint32_t> s_AWLEN;
  sc_signal<uint32_t> s_AWSIZE;
  sc_signal<bool> s_AWID;
  sc_signal<uint32_t> s_AWBURST;
  sc_signal<bool> s_AWLOCK;
  sc_signal<uint32_t> s_AWCACHE;
  sc_signal<uint32_t> s_AWPROT;
  sc_signal<uint32_t> s_AWQOS;
  sc_signal<bool> s_AWUSER;
  sc_signal<bool> s_WVALID;
  sc_signal<bool> s_WREADY;
  sc_signal<bool> s_WLAST;
  sc_signal<uint32_t> s_WSTRB;
  sc_signal<bool> s_WUSER;
  sc_signal<bool> s_BVALID;
  sc_signal<bool> s_BREADY;
  sc_signal<uint32_t> s_BRESP;
  sc_signal<bool> m_ARVALID;
  sc_signal<bool> m_ARREADY;
  sc_signal<uint32_t> m_ARLEN;
  sc_signal<uint32_t> m_ARSIZE;
  sc_signal<bool> m_ARID;
  sc_signal<uint32_t> m_ARBURST;
  sc_signal<bool> m_ARLOCK;
  sc_signal<uint32_t> m_ARCACHE;
  sc_signal<uint32_t> m_ARPROT;
  sc_signal<uint32_t> m_ARQOS;
  sc_signal<bool> m_ARUSER;
  sc_signal<bool> m_RVALID;
  sc_signal<bool> m_RREADY;
  sc_signal<bool> m_RLAST;
  sc_signal<uint32_t> m_RRESP;
  sc_signal<bool> m_RUSER;
  sc_signal<bool> m_AWVALID;
  sc_signal<bool> m_AWREADY;
  sc_signal<uint32_t> m_AWLEN;
  sc_signal<uint32_t> m_AWSIZE;
  sc_signal<bool> m_AWID;
  sc_signal<uint32_t> m_AWBURST;
  sc_signal<bool> m_AWLOCK;
  sc_signal<uint32_t> m_AWCACHE;
  sc_signal<uint32_t> m_AWPROT;
  sc_signal<uint32_t> m_AWQOS;
  sc_signal<bool> m_AWUSER;
  sc_signal<bool> m_WVALID;
  sc_signal<bool> m_WREADY;
  sc_signal<bool> m_WLAST;
  sc_signal<uint32_t> m_WSTRB;
  sc_signal<bool> m_WUSER;
  sc_signal<bool> m_BVALID;
  sc_signal<bool> m_BREADY;
  sc_signal<uint32_t> m_BRESP;
  sc_signal<uint32_t> s_ARADDR;
  sc_signal<uint32_t> s_RDATA;
  sc_signal<uint32_t> s_AWADDR;
  sc_signal<uint32_t> s_WDATA;
  sc_signal<uint32_t> m_ARADDR;
  sc_signal<uint32_t> m_RDATA;
  sc_signal<uint32_t> m_AWADDR;
  sc_signal<uint32_t> m_WDATA;

  Vaxi_dut dut("dut");
  dut.clk(clk);
  dut.rst(rst);

  Reset reset("reset");
  reset.clk(clk);
  reset.rst(rst);

  dut.m_ARADDR(m_ARADDR);
  dut.m_ARBURST(m_ARBURST);
  dut.m_ARCACHE(m_ARCACHE);
  dut.m_ARID(m_ARID);
  dut.m_ARLEN(m_ARLEN);
  dut.m_ARLOCK(m_ARLOCK);
  dut.m_ARPROT(m_ARPROT);
  dut.m_ARQOS(m_ARQOS);
  dut.m_ARREADY(m_ARREADY);
  dut.m_ARSIZE(m_ARSIZE);
  dut.m_ARUSER(m_ARUSER);
  dut.m_ARVALID(m_ARVALID);
  dut.m_AWADDR(m_AWADDR);
  dut.m_AWBURST(m_AWBURST);
  dut.m_AWCACHE(m_AWCACHE);
  dut.m_AWID(m_AWID);
  dut.m_AWLEN(m_AWLEN);
  dut.m_AWLOCK(m_AWLOCK);
  dut.m_AWPROT(m_AWPROT);
  dut.m_AWQOS(m_AWQOS);
  dut.m_AWREADY(m_AWREADY);
  dut.m_AWSIZE(m_AWSIZE);
  dut.m_AWUSER(m_AWUSER);
  dut.m_AWVALID(m_AWVALID);
  dut.m_BREADY(m_BREADY);
  dut.m_BRESP(m_BRESP);
  dut.m_BVALID(m_BVALID);
  dut.m_RDATA(m_RDATA);
  dut.m_RLAST(m_RLAST);
  dut.m_RREADY(m_RREADY);
  dut.m_RRESP(m_RRESP);
  dut.m_RUSER(m_RUSER);
  dut.m_RVALID(m_RVALID);
  dut.m_WDATA(m_WDATA);
  dut.m_WLAST(m_WLAST);
  dut.m_WREADY(m_WREADY);
  dut.m_WSTRB(m_WSTRB);
  dut.m_WUSER(m_WUSER);
  dut.m_WVALID(m_WVALID);
  dut.s_ARADDR(s_ARADDR);
  dut.s_ARBURST(s_ARBURST);
  dut.s_ARCACHE(s_ARCACHE);
  dut.s_ARID(s_ARID);
  dut.s_ARLEN(s_ARLEN);
  dut.s_ARLOCK(s_ARLOCK);
  dut.s_ARPROT(s_ARPROT);
  dut.s_ARQOS(s_ARQOS);
  dut.s_ARREADY(s_ARREADY);
  dut.s_ARSIZE(s_ARSIZE);
  dut.s_ARUSER(s_ARUSER);
  dut.s_ARVALID(s_ARVALID);
  dut.s_AWADDR(s_AWADDR);
  dut.s_AWBURST(s_AWBURST);
  dut.s_AWCACHE(s_AWCACHE);
  dut.s_AWID(s_AWID);
  dut.s_AWLEN(s_AWLEN);
  dut.s_AWLOCK(s_AWLOCK);
  dut.s_AWPROT(s_AWPROT);
  dut.s_AWQOS(s_AWQOS);
  dut.s_AWREADY(s_AWREADY);
  dut.s_AWSIZE(s_AWSIZE);
  dut.s_AWUSER(s_AWUSER);
  dut.s_AWVALID(s_AWVALID);
  dut.s_BREADY(s_BREADY);
  dut.s_BRESP(s_BRESP);
  dut.s_BVALID(s_BVALID);
  dut.s_RDATA(s_RDATA);
  dut.s_RLAST(s_RLAST);
  dut.s_RREADY(s_RREADY);
  dut.s_RRESP(s_RRESP);
  dut.s_RUSER(s_RUSER);
  dut.s_RVALID(s_RVALID);
  dut.s_WDATA(s_WDATA);
  dut.s_WLAST(s_WLAST);
  dut.s_WREADY(s_WREADY);
  dut.s_WSTRB(s_WSTRB);
  dut.s_WUSER(s_WUSER);
  dut.s_WVALID(s_WVALID);

  AxiTB tb("tb");
  tb.clk(clk);

  tb.m_ARADDR(m_ARADDR);
  tb.m_ARBURST(m_ARBURST);
  tb.m_ARCACHE(m_ARCACHE);
  tb.m_ARID(m_ARID);
  tb.m_ARLEN(m_ARLEN);
  tb.m_ARLOCK(m_ARLOCK);
  tb.m_ARPROT(m_ARPROT);
  tb.m_ARQOS(m_ARQOS);
  tb.m_ARREADY(m_ARREADY);
  tb.m_ARSIZE(m_ARSIZE);
  tb.m_ARUSER(m_ARUSER);
  tb.m_ARVALID(m_ARVALID);
  tb.m_AWADDR(m_AWADDR);
  tb.m_AWBURST(m_AWBURST);
  tb.m_AWCACHE(m_AWCACHE);
  tb.m_AWID(m_AWID);
  tb.m_AWLEN(m_AWLEN);
  tb.m_AWLOCK(m_AWLOCK);
  tb.m_AWPROT(m_AWPROT);
  tb.m_AWQOS(m_AWQOS);
  tb.m_AWREADY(m_AWREADY);
  tb.m_AWSIZE(m_AWSIZE);
  tb.m_AWUSER(m_AWUSER);
  tb.m_AWVALID(m_AWVALID);
  tb.m_BREADY(m_BREADY);
  tb.m_BRESP(m_BRESP);
  tb.m_BVALID(m_BVALID);
  tb.m_RDATA(m_RDATA);
  tb.m_RLAST(m_RLAST);
  tb.m_RREADY(m_RREADY);
  tb.m_RRESP(m_RRESP);
  tb.m_RUSER(m_RUSER);
  tb.m_RVALID(m_RVALID);
  tb.m_WDATA(m_WDATA);
  tb.m_WLAST(m_WLAST);
  tb.m_WREADY(m_WREADY);
  tb.m_WSTRB(m_WSTRB);
  tb.m_WUSER(m_WUSER);
  tb.m_WVALID(m_WVALID);
  tb.s_ARADDR(s_ARADDR);
  tb.s_ARBURST(s_ARBURST);
  tb.s_ARCACHE(s_ARCACHE);
  tb.s_ARID(s_ARID);
  tb.s_ARLEN(s_ARLEN);
  tb.s_ARLOCK(s_ARLOCK);
  tb.s_ARPROT(s_ARPROT);
  tb.s_ARQOS(s_ARQOS);
  tb.s_ARREADY(s_ARREADY);
  tb.s_ARSIZE(s_ARSIZE);
  tb.s_ARUSER(s_ARUSER);
  tb.s_ARVALID(s_ARVALID);
  tb.s_AWADDR(s_AWADDR);
  tb.s_AWBURST(s_AWBURST);
  tb.s_AWCACHE(s_AWCACHE);
  tb.s_AWID(s_AWID);
  tb.s_AWLEN(s_AWLEN);
  tb.s_AWLOCK(s_AWLOCK);
  tb.s_AWPROT(s_AWPROT);
  tb.s_AWQOS(s_AWQOS);
  tb.s_AWREADY(s_AWREADY);
  tb.s_AWSIZE(s_AWSIZE);
  tb.s_AWUSER(s_AWUSER);
  tb.s_AWVALID(s_AWVALID);
  tb.s_BREADY(s_BREADY);
  tb.s_BRESP(s_BRESP);
  tb.s_BVALID(s_BVALID);
  tb.s_RDATA(s_RDATA);
  tb.s_RLAST(s_RLAST);
  tb.s_RREADY(s_RREADY);
  tb.s_RRESP(s_RRESP);
  tb.s_RUSER(s_RUSER);
  tb.s_RVALID(s_RVALID);
  tb.s_WDATA(s_WDATA);
  tb.s_WLAST(s_WLAST);
  tb.s_WREADY(s_WREADY);
  tb.s_WSTRB(s_WSTRB);
  tb.s_WUSER(s_WUSER);
  tb.s_WVALID(s_WVALID);

  sc_start();
  return 0;
}
